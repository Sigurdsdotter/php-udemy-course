
* SQL- Injections = Hacker method

Ex: Om har en databas med ett form; där kan personen skriva in ett statement som t ex )' DROP Table '";
Statement kan gå in i databas och radera tabellen.

Som skydd, måste SANITERA sidan!

* SÄKERHET mot att hacker adderar skadlig kod till databas: 
Skydda data med denna kod i mySQL function. Koden tar upp specialtecken och behandlar som en string, ej kod. (koden funkar på password också):
$username = mysqli_real_escape_string($connection,$username);

*LÖSENORD SKYDD om hacker vill hämta data från databas:
Hacker kan istället för registrering köra mjukvara som hämtar alla användare + lösenord...
Lösning: Skapa krypterat lösenord för användare. T ex om nån har lösenord 123 kommer det omvandlas till komplext lösenord i databas systemet.

I databasen, tillåt ca 200 karaktärer i lösenordet.
Använd crypt function. Info: php.net/manual/en/function.crypt.php
Kommer använda crypt() Blowfish + Salt parametern och Hash format(ex: $2a$) 


OBS! ( Idag används crypt inte lika ofta för lösenordshantering i PHP, 
eftersom det finns nyare och mer säkra alternativ som är enklare att 
använda och erbjuder bättre säkerhet. De två huvudsakliga funktionerna 
som rekommenderas idag för lösenordshantering i PHP är password_hash och 
password_verify. ) Instruktören hade PHP version 5.6.3. Jag hade PHP Version 8.2.12. ( För att hitta version, gå till localhost/xampp/ - PHPinfo)


-------

(Info från ChatGPT om Cross-Site Scripting attacker) :

XSS (Cross-Site Scripting) attacker är en typ av säkerhetssårbarhet som tillåter en angripare att infoga skadlig kod (vanligtvis JavaScript) i webbapplikationer som sedan körs i webbläsaren hos andra användare. Dessa attacker utnyttjar sårbarheter där användarinmatning inte korrekt valideras eller "sanitiseras" innan den visas i webbläsaren. Här är en mer detaljerad förklaring:

Typer av XSS-attacker
Stored XSS: Skadlig kod lagras permanent på servern, t.ex. i en databas, och visas för användare när de hämtar data. Ett exempel kan vara ett forum där en användare postar ett meddelande som innehåller skadlig kod. När andra användare läser meddelandet, körs den skadliga koden i deras webbläsare.

Reflected XSS: Skadlig kod ingår i en länk som skickas till användaren. När användaren klickar på länken, skickas den skadliga koden till servern och reflekteras tillbaka i svarssidan. Detta kan hända till exempel när en användare klickar på en länk i ett e-postmeddelande eller på en webbplats.

DOM-based XSS: Den skadliga koden påverkar dokumentets DOM (Document Object Model) snarare än att skickas till servern. Den här typen av XSS sker helt och hållet i webbläsaren och kan t.ex. utnyttja JavaScript som manipulerar sidan dynamiskt.

Hur XSS-attacker fungerar
En angripare skickar in skadlig kod genom ett formulär, en URL, eller ett annat sätt som webbapplikationen accepterar inmatning.
Webbapplikationen visar sedan denna inmatning utan att korrekt validera eller "sanitise" den, vilket gör att den skadliga koden körs i webbläsaren hos någon annan användare.
Den skadliga koden kan sedan stjäla sessioncookies, logga tangenttryckningar, ändra innehållet på sidan, eller utföra andra skadliga handlingar.
Skydd mot XSS
För att skydda din webbapplikation mot XSS-attacker kan du vidta flera åtgärder:

Sanitise och validera inmatning: Använd funktioner som htmlspecialchars eller htmlentities i PHP för att konvertera specialtecken till HTML-entiteter, vilket förhindrar att de tolkas som kod.

php
Kopiera kod
$safe_name = htmlspecialchars($name, ENT_QUOTES, 'UTF-8');
Använd en Content Security Policy (CSP): En CSP kan hjälpa till att begränsa vilka resurser som får laddas och köras på din webbplats, vilket kan minska risken för att skadlig kod körs.

Escape output: Se till att all dynamisk inmatning som visas på sidan är ordentligt "escaped".

Validera data på serversidan och klientsidan: Se till att data som skickas till servern är vad du förväntar dig, och gör samma sak på klientsidan för att förbättra användarupplevelsen.

Genom att följa dessa bästa praxis kan du kraftigt minska risken för XSS-attacker på din webbplats.



--------------------------------------------------------------------
* DATABAS

För att komma till databas: http://localhost/phpmyadmin/

Skapa databas på homepage - Databaser, eller manuellt på SQL sidan genom att skriva in CREATE DATABASE exampledatabasnamn;

Skapa databas: Gå in på min skapade databas, välj namn på tabell och antal rader.
Typ = INT är siffror. VARCHAR är bokstäver. Sätt längd, t ex 32. Klicka i Primary i Index och A_I på INT, då automatiseras nytt id nummer vid ny rad. Spara!
Lägg till data: Gå till Insert/Lägg till. Fyll i namn under värde och password t ex. Sen Go/Kör. Gå till Browse/Bläddra, se datan. Om vill delite, klicka i ruta - Radera

-------CRUD
Joba med database följer dessa steg: CRUD
 CRUD = Create Read Update Delete

 Skapa separata PHP-filer för varje CRUD-operation. Detta gör det lättare att hitta och underhålla specifik funktionalitet.

create.php   // För att skapa nya poster
read.php     // För att läsa och visa poster
update.php   // För att uppdatera befintliga poster
delete.php   // För att radera poster
-----

Hämta data med php post method function:

Denna kod var i ursprungliga Create, innan jag ReFactoring:

<?php
// CRUD = Create Read Update Delete

// Create database with data. 
// Create före ReFactoring. Denna kod görs om till en function och kallas överst på denna filsida:
/*
if(isset($_POST['submit'])) {

    $username= $_POST['username'];
    $password = $_POST['password'];

    
    $query = "INSERT INTO users(username,password) ";   //sql command
    $query .="VALUES ('$username', '$password')";       // Punkten sätter ihop dessa två texter. Detta strukturerar koden. Kan skriva ihop, plasera VALUES efter INSERT INTO. HTML Strings behöver citat tecken

    $result = mysqli_query($connection, $query);

    if(!$result) {                                      // Checkar om värden inte kommit fram = Använd Bolean. ! indikerar false. Om värderna inte kommit fram så händer detta:
        die('Query FAILED' . mysqli_error());            // sql error åtgärd meddelande. Om false, så ska all verksamhet stöngas av. Query ska avsluyas.
    }     
}
*/

 ?>

if(isset($_POST['submit'])) {

    $username= $_POST['username'];
    $password = $_POST['password'];

    $connection = mysqli_connect('localhost', 'root', '', 'loginapp');   // Skapa alltid variabel till databas kontakt. 4 parametrar. Första är server - localhost, username är root och '' är för password, loginapp är mySQL database.

    if($connection) {
        echo "works! We are connected to the database:)";
    } else {
        die("Dtabase connection faild, sorry");     // error meddelande 
    }
    
     $query = "INSERT INTO users(username,password) ";   //sql command
    $query .="VALUES ('$username', '$password')";       // Punkten sätter ihop dessa två texter. Detta strukturerar koden. Kan skriva ihop, plasera VALUES efter INSERT INTO. HTML Strings behöver citat tecken

    $result = mysqli_query($connection, $query);

    if(!$result) {                                      // Checkar om värden inte kommit fram = Använd Bolean. ! indikerar false. Om värderna inte kommit fram så händer detta:
        die('Query FAILED' . mysqli_error());            // sql error åtgärd meddelande. Om false, så ska all verksamhet stöngas av. Query ska avsluyas.
    }
   
}

----
CRUD: Read:

<?php 

    $connection = mysqli_connect('localhost', 'root', '', 'loginapp');

    if($connection) {
        echo "works! We are connected to the database:)";
    } else {
        die("Dtabase connection faild, sorry");
    }
    
    $query = "SELECT * FROM users";   //sql command. * betyder All data från databasen
    
    $result = mysqli_query($connection, $query);

    if(!$result) {                                      // Checkar om värden inte kommit fram = Använd Bolean. ! indikerar false. Om värderna inte kommit fram så händer detta:
        die('Query FAILED' . mysqli_error());            // sql error åtgärd meddelande. Om false, så ska all verksamhet stöngas av. Query ska avsluyas.
    }
       
?>

HTML delen:


<div class="container">

    <div class="col-sm-6">

    <!-- Read: Form används inte när man är under Read process -->

    <?php

    while($row = mysqli_fetch_assoc($result)) {   // Bolean.. Om det som hämtas är true; finns data, adressera data till nya variabeln row

        ?>

        <pre>

        <?php
        print_r($row);
        ?>

        </pre>

        <?php
        
    }

?>

    </div>

</div>

?>

------
CRUD: Update:

CRUD: Delete:

------------

ReFactoring = När färdig med sin kod, vill man omorganisera

------------------------------------------------------------

COOKIES och SESSIONS:
Cookies sparar info i användarens browser och Sessions sparar info i servern. Sessions är kraftfullare, kan spara mycket mer info och har mer kontroll över förvaringen!

Hur man skapar cookies och planterar dem med information hos användare för att skapar användarvänlig sida.

Info om användare sker genom en function, super global: $_COOKIE;

<?php 

$name = "SomeName";
$value = 100;
$expiration =time() + (60*60*24*7*4);      // time function är förprogrammerad köra i sek. Inom parentes multiplerar sekunder.. viar när function avslutas. (sek,min,tim,dagar,veckor) Denna cookie går ut efter 1 månad. Kan lägga på mer tid genom addera månader eller bara skriva antalet veckor.

setcookie($name, $value, $expiration);      // denna pree built function tar 3 parametrar.

?>
(HTML HEADER)
<?php 
// Om besökaren som vid första besöket har fått en cookie, kommer tillbaka till sidan kickar denna function in 
if(isset($_COOKIE["SomeName"])) {

$someOne = $_COOKIE["SomeName"];     // spara i variabeln i en kortare namn, snabbare jobb.

echo $someOne;                      // Fungerar cookie? Testa genom echo. Värdet som inmatats i 2 parametern kommer visas på fönstret.

} else { 

    $someOne = "";      // Behöver null, annars letar den konstant/loppar det och får error

}

?>


SESSIONS:


_____________________________________

CLASS in OOP (Object Oriented Program)

Class är en blueprint av object. "Ritningen för huset."
Object är en "instance"/ett exempel. Det är en grupp med data/egenskaper som relatrar till varandra med ett särskillt tema. Speglar värkligheten, t ex en bil.
Constructors är methods som körs automatiskt när objekt skapas.. måste inte call it. Bra om man behöver validera program de fungerar innan användare kör programmet. Kanske vill ha särskilda värden by default.
Static data är static inom class. Tillhör enbart classen den är i.

Genom att arbeta i OOP, underlättar sammarbeta med kollegor. OOP är datastruktur, 
så en kan jobba med header, en kan jobba med footer, en kan jobba med intro och jobben kolliderar inte. 
Class= Blue print / Beskrivning / Folder
Class = Properties ( Variables, Arrays, Data) och Methods (Functions, Beteenden)

Object = Variabel / Function / Datastruktur.
Tex en Bil:  Properties(Egenskaper) = Däck, säten, radio
             Method(Beteende) = Däcken rör sig, säten kan justeras, radion kan sättas på.



________________________________________________

INSPIRERANDE WEBSIDOR:

https://www.tourismkelowna.com/
